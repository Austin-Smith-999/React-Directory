{"version":3,"sources":["components/NavBar.js","components/column.js","utils/API.js","components/DataBody.js","components/Row.js","components/Container.js","components/TablesOfPeopleContainer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","type","placeholder","onChange","handleChange","onClick","sortAlphabetically","Col","axios","get","DataBody","users","map","name","picture","phone","email","dob","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","FormatDate","DataTables","headings","width","style","Container","TablesOfPeopleContainer","event","console","log","value","state","setState","filterArray","result","filter","person","includes","reverse","sort","a","b","API","then","res","data","results","this","Row","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7f0821c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../App.css';\r\n\r\nfunction NavBar(props) {\r\n    return (\r\n        <div>\r\n        <nav className=\"navBar\">\r\n            <h1 className=\"titleText\">Employee Directory</h1>\r\n            <h4 className=\"titleText\">Look for employees using search box</h4>\r\n        </nav>\r\n        \r\n        {/* <input className=\"alignCenter\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"></input>\r\n         */}\r\n         <input className=\"searchBox\" type=\"search\" placeholder=\"Search\" onChange={props.handleChange}/>\r\n        <button onClick={props.sortAlphabetically}>Sort by Name</button>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\n\r\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\r\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\r\n\r\nfunction Col(props) {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return (\r\n    <div className={size}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Col;","import axios from \"axios\";\r\n\r\nexport default {\r\n    getUsers: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","import React from \"react\";\r\n\r\nfunction DataBody({users}) {\r\n    function FormatDate(date) {\r\n        const dateArray = date.split(\"-\");\r\n        const year = dateArray[0];\r\n        const month = dateArray[1];\r\n        const dayArray = dateArray[2].split(\"T\");\r\n        const day = dayArray[0];\r\n        const formattedDate = [month, day, year].join(\"-\");\r\n        return formattedDate;        \r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {users.map(({name, picture, phone, email, dob}) => {\r\n                return (\r\n                    <tr>\r\n                        <td className=\"image\">\r\n                            <img src={picture.medium} alt=\"user image\"/>\r\n                        </td>\r\n                        <td className=\"name align-middle\">\r\n                            {name.first} {name.last}\r\n                        </td>\r\n                        <td className=\"phone align-middle\">\r\n                            {phone}\r\n                        </td>\r\n                        <td className=\"email align-middle\">\r\n                            <a href={\"mailto:\"+ email} target=\"__blank\">{email}</a>\r\n                        </td>                        \r\n                        <td className=\"DOB align-middle\">\r\n                            {FormatDate(dob.date)}\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default DataBody;\r\n","import React from \"react\";\r\nimport DataBody from \"./DataBody\";\r\n\r\n// function Row(props) {\r\n//   return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n// }\r\nfunction DataTables({users, headings}) {\r\n  return (\r\n    <div>\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          {headings.map(({width}) => \r\n          {\r\n            return(\r\n              <td style={{width}}>\r\n\r\n              </td>\r\n            )\r\n          }\r\n          )} \r\n        </tr>\r\n      </thead>\r\n      <DataBody users={users}/>\r\n    </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DataTables;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;","import React, { Component } from \"react\";\r\nimport '../App.css';\r\nimport NavBar from \"./NavBar\";\r\nimport Col from \"./column\";\r\nimport API from \"../utils/API\";\r\nimport Row from \"./Row\";\r\nimport Card from \"./card\";\r\nimport Container from \"./Container\";\r\n\r\n\r\n// console.log(API);\r\nclass TablesOfPeopleContainer extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      result: [],\r\n      filterArray: [],\r\n      reverse: false\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    console.log(event.target.value);\r\n    console.log(this.state);\r\n\r\n    this.setState({filterArray: this.state.result.filter(person => person.name.first.includes(event.target.value) || person.name.last.includes(event.target.value) || person.email.includes(event.target.value))});\r\n\r\n\r\n    //  this.setState({result: this.state.result.filter(name=>name.includes(event.target.value))})\r\n    \r\n    // this.setState({value: event.target.value});\r\n  }\r\n\r\n  // handleSubmit(event) {\r\n  //   alert('An essay was submitted: ' + this.state.value);\r\n  //   event.preventDefault();\r\n  // }\r\n\r\n  headings = [\r\n    {name: \"image\", width: \"10%\"},\r\n    {name: \"name\", width: \"10%\"},\r\n    {name: \"phone\", width: \"20%\"},\r\n    {name: \"email\", width: \"20%\"},\r\n    {name: \"DOB\", width: \"10%\"},\r\n  ];\r\n\r\n  \r\n  // state = {\r\n\t// \tresults: [],\r\n\t// \tsearch: \"\",\r\n\t// };\r\n  \r\n    // handlePageChange = page => {\r\n    //   this.setState({ currentPage: page });\r\n    // };\r\n\r\n    componentDidMount() {\r\n      // this.searchEmployees();\r\n      API.getUsers()\r\n      .then(res => {\r\n        this.setState({result: res.data.results, filterArray: res.data.results});\r\n      }).then(()=> console.log(\"this.state\", this.state))\r\n    }\r\n\r\n    sortAlphabetically = (reverse) => {\r\n      console.log(\"reverse!\", reverse);\r\n    // console.log('clicked')\r\n        this.setState({filterArray : this.state.filterArray.sort((a, b) => {\r\n          if (a.name.last < b.name.last ) {\r\n            return reverse ? 1 : -1;\r\n          }\r\n          if (a.name.last > b.name.last ) {\r\n            return reverse ? -1 : 1 ;\r\n          }\r\n          // a must be equal to b\r\n          return 0;\r\n        }), \r\n        reverse: !reverse \r\n      })\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        <>\r\n        <NavBar \r\n          handleChange = {this.handleChange}\r\n          sortAlphabetically={() => this.sortAlphabetically(this.state.reverse)}\r\n        />\r\n        <Row \r\n          headings = {this.headings}\r\n          users = {this.state.filterArray}\r\n        />\r\n        </>\r\n      )\r\n    }\r\n\r\n      // res is the data coming back from the axios call;\r\n      // .then((res) => this.setState({ results: res.data.results }))\r\n      // .catch((err) => console.log(err));\r\n  \r\n    // searchEmployees = () => {\r\n    //   // API.search()\r\n    //   //   // res is the data coming back from the axios call;\r\n    //   //   .then((res) => this.setState({ results: res.data.results }))\r\n    //   //   .catch((err) => console.log(err));\r\n    // };\r\n  \r\n\r\n    // handleSort = () => {\r\n    //   console.log('testing handleSort function');\r\n    // };\r\n  \r\n    // handleInputChange = (event) => {\r\n    //   // Getting the value and name of the input which triggered the change\r\n    //   const value = event.target.value;\r\n    //   const name = event.target.name;\r\n  \r\n    //   // update the state of the password to the rendered change\r\n    //   // const pass = event.target.password;\r\n  \r\n    //   // Updating the input's state\r\n    //   this.setState({\r\n    //     [name]: value,\r\n    //   });\r\n    // };\r\n  \r\n    // handleFormSubmit = (event) => {\r\n    //   // Preventing the default behavior of the form submit (which is to refresh the page)\r\n    //   event.preventDefault();\r\n    //   this.searchEmployees(this.state.search);\r\n    // };\r\n\r\n\r\n\r\n    // render() {\r\n    //   //\r\n    //   if (this.state.results.length === 0) return <p>Loading...</p>;\r\n  \r\n    //   return (\r\n    //     <Container>\r\n    //       <Card className=\"justify-content-center\">\r\n    //         <Row heading=\"Your Awesome Company!!!\">\r\n    //           <Col size=\"md-3\">\r\n    //             <button\r\n    //               className=\"btn btn-light btn-sm\"\r\n    //               onClick={this.handleSort}\r\n    //               disabled\r\n    //             >\r\n    //               HEAD-SHOT\r\n    //             </button>\r\n    //           </Col>\r\n    //           <Col size=\"md-3\" className=\"btn btn-light btn-sm\">\r\n    //             <button\r\n    //               className=\"btn btn-light btn-sm\"\r\n    //               onClick={this.handleSort}\r\n    //             >\r\n    //               NAME\r\n    //             </button>\r\n    //           </Col>\r\n    //           <Col size=\"md-3\">\r\n    //             <button\r\n    //               className=\"btn btn-light btn-sm\"\r\n    //               onClick={this.handleSort}\r\n    //               disabled\r\n    //             >\r\n    //               CELL\r\n    //             </button>\r\n    //           </Col>\r\n    //           <Col size=\"md-3\">\r\n    //             <button\r\n    //               className=\"btn btn-light btn-sm\"\r\n    //               onClick={this.handleSort}\r\n    //               disabled\r\n    //             >\r\n    //               EMAIL\r\n    //             </button>\r\n    //           </Col>\r\n    //         </Row>\r\n    //       </Card>\r\n    //       {this.state.results.map((employee) => {\r\n    //         console.log(employee);\r\n    //         return (\r\n    //           // outermost component in a loop needs a key value PROP.\r\n    //           <Card key={employee.id.value}>\r\n    //             <Row>\r\n    //               <Col size=\"md-3\">\r\n    //                 <img src={employee.picture.medium} />\r\n    //               </Col>\r\n    //               <Col size=\"md-3\">\r\n    //                 {employee.name.first} {employee.name.last}\r\n    //               </Col>\r\n    //               <Col size=\"md-3\">{employee.cell}</Col>\r\n    //               <Col size=\"md-3\">{employee.email}</Col>\r\n    //             </Row>\r\n    //           </Card>\r\n    //         );\r\n    //       })}\r\n    //     </Container>\r\n    //   );\r\n    // }\r\n  }\r\n  \r\n  export default TablesOfPeopleContainer;","import React from 'react';\nimport './App.css';\n// import mainPageContainer from \"./components/mainpageContainer\";\nimport NavBar from \"./components/NavBar\";\nimport TablesOfPeopleContainer from './components/TablesOfPeopleContainer';\n\nfunction App() {\n  return ( \n    <div>\n  {/* <NavBar /> */}\n  <TablesOfPeopleContainer />\n  </div>\n\n          );\n}\n        \n\nexport default App;\n\n// function App() {\n//   return (\n//     <div>\n//       <Navbar />\n//       <Header />\n//       <Section />\n//     </div>\n//   );\n// }\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}